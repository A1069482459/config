server: 
  port: 5003

###服务的名字名称(该服务注册到eureka注册中心的名称)
spring:
  application:
    name: spring-gateway  #在订单系统的application.yml叫app-order
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true #开启从注册中心动态创建路由的功能，利用微服务名进行路由
      routes:
        - id: app-project #payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名
          # uri: http://localhost:5000         #匹配后提供服务的路由地址
          uri: lb://app-project     #匹配后提供服务的路由地址
          predicates:
            - Path=/api/**         # 断言，路径相匹配的进行路由

        - id: app-user #payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名
          # uri: http://localhost:5001          #匹配后提供服务的路由地址
          uri: lb://app-user #匹配后提供服务的路由地址
          predicates:
            - Path=/user/**         # 断言，路径相匹配的进行路由
            - Path=/user_group/**         # 断言，路径相匹配的进行路由

      globalcors: # 全局的跨域处理
        add-to-simple-url-handler-mapping: true # 解决options请求被拦截问题
        corsConfigurations:
          '[/**]':
            allowedOrigins: # 允许哪些网站的跨域请求 
              - "http://localhost:5002"
              - "http://localhost:5001"
              - "http://localhost:5000"
              - "http://localhost:8080"
            allowedMethods: # 允许的跨域ajax的请求方式
              - "GET"
              - "POST"
              - "DELETE"
              - "PUT"
              - "OPTIONS"
              - "HEAD"
              - "TRACE"
              - "PATCH"
            allowedHeaders: "*" # 允许在请求中携带的头信息
            allowCredentials: true # 是否允许携带cookie
            maxAge: 360000 # 这次跨域检测的有效期


###服务注册到eureka注册中心的地址
eureka:
  client:
    service-url:
      defaultZone: http://172.17.0.2:8100/eureka
    ###因为该应用为服务提供者，是eureka的一个客户端，需要注册到注册中心
    register-with-eureka: true
    ###是否需要从eureka上检索服务
    fetch-registry: true
  instance:
    prefer-ip-address: true #将自己的ip地址注册到Eureka服务中
    ip-address: localhost
    instance-id: ${server.port} #指定实例id
      
